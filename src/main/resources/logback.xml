<?xml version="1.0" encoding="UTF-8"?>
<!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration scan="true" scanPeriod="60 seconds" debug="false">

<!-- 根节点<configuration>的子节点：<appender><logger><root> -->

	<!-- 设置上下文名称：<contextName> 每个logger都关联到logger上下文，默认上下文名称为“default”。但可以使用<contextName>设置成其他名字，用于区分不同应用程序的记录。一旦设置，不能修改。 -->
	<contextName>logback</contextName>

	<!-- 设置变量： <property> -->
	<property name="LOG_DIR" value="/opt/logs/wxmp" />
	<!-- 获取时间戳字符串：<timestamp>两个属性 key:标识此<timestamp> 的名字；datePattern：设置将当前时间（解析配置文件的时间）转换为字符串的模式，遵循java.txt.SimpleDateFormat的格式。 ${bySecond}取值使用-->
	<timestamp key="bySecond" datePattern="yyyyMMdd'T'HHmmss"/>


	<!-- 控制台输出 out-->
	<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
		<!-- 日志输出编码 -->
		<Encoding>UTF-8</Encoding>
		<layout class="ch.qos.logback.classic.PatternLayout">
			<!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符 -->
			<pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}][%-5level][%thread][%logger{500}] -> %msg%n</pattern>
		</layout>
		<target>System.out</target>
	</appender>

	<!-- 控制台输出 err-->
	<appender name="STDERR" class="ch.qos.logback.core.ConsoleAppender" target="System.err">
		<!-- 日志输出编码 -->
		<Encoding>UTF-8</Encoding>
		<layout class="ch.qos.logback.classic.PatternLayout">
			<!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符 -->
			<pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}][%-5level][%thread][%logger] -> %msg%n</pattern>
		</layout>
		<target>System.err</target>
	</appender>


	<!-- 按照每天生成日志文件 -->
	<appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<Encoding>UTF-8</Encoding>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!--日志文件输出的文件名 -->
			<FileNamePattern>${LOG_DIR}/myApp.log-%d{yyyy-MM-dd}.log
			</FileNamePattern>
			<MaxHistory>30</MaxHistory>
		</rollingPolicy>
		<layout class="ch.qos.logback.classic.PatternLayout">
			<!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符 -->
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
		</layout>
		<!--日志文件最大的大小 -->
		<triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
			<MaxFileSize>10MB</MaxFileSize>
		</triggeringPolicy>
	</appender>

		<!--日志异步到数据库
	<appender name="DB" class="ch.qos.logback.classic.db.DBAppender"> -->
		<!-- 日志异步到数据库
		<connectionSource class="ch.qos.logback.core.db.DriverManagerConnectionSource">
			<dataSource class="com.alibaba.druid.pool.DruidDataSource">
				<driverClass>oracle.jdbc.OracleDriver</driverClass>
				<url>jdbc:oracle:thin:@219.150.85.232:9801:crmorcl</url>
				<user>szslo2o</user>
				<password>szslo2o</password>
			</dataSource>
		</connectionSource> -->
	<!-- </appender> -->

	<!-- show parameters for hibernate sql 专为 Hibernate 定制 -->
	<logger name="org.hibernate.type.descriptor.sql.BasicBinder" level="TRACE" />
	<logger name="org.hibernate.type.descriptor.sql.BasicExtractor" level="DEBUG" />
	<logger name="org.hibernate.SQL" level="DEBUG" />
	<logger name="org.hibernate.engine.QueryParameters" level="DEBUG" />
	<logger name="org.hibernate.engine.query.HQLQueryPlan" level="DEBUG" />

	<!-- 日志输出级别  TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF-->
	<root level="INFO">
		<!-- <appender-ref ref="STDOUT" /> -->
		<appender-ref ref="STDERR" />
		<!-- <appender-ref ref="FILE" /> -->
	</root>



</configuration>